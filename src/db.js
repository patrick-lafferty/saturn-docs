let topLevel = {type: 'dir',
 classType: 'dirType',
 name: 'services/apollo/lib/',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'application.h',
 contents: {classes: [{name: 'Application',
 classComment: '    The base class for all graphical Saturn applications,     Application is responsible for setting up a window,    handling logic to update and render its window    ',
 publicMethods: [{name: 'isValid',
 signature: '() -> bool',
 description: '        An Application is in a valid state if it successfully        created a Window and TextRenderer object        '}, {name: 'startMessageLoop',
 signature: '() -> void',
 description: '        The main loop for all graphical applications. Updates the        window at a fixed rate, and delegates all message handling        to the derived application.        '}, {name: 'readSelf',
 signature: '(uint32_t, uint32_t) -> void',
 description: ''}, {name: 'getProperty',
 signature: '(std::string_view) -> int',
 description: ''}, {name: 'readProperty',
 signature: '(uint32_t, uint32_t, uint32_t) -> void',
 description: ''}, {name: 'writeProperty',
 signature: '(uint32_t, uint32_t, uint32_t, Vostok::ArgBuffer &) -> void',
 description: ''}, {name: 'getNestedObject',
 signature: '(std::string_view) -> Vostok::Object *',
 description: ''}, {name: 'getFunction',
 signature: '(std::string_view) -> int',
 description: ''}, {name: 'readFunction',
 signature: '(uint32_t, uint32_t, uint32_t) -> void',
 description: ''}, {name: 'writeFunction',
 signature: '(uint32_t, uint32_t, uint32_t, Vostok::ArgBuffer &) -> void',
 description: ''}, {name: 'describeFunction',
 signature: '(uint32_t, uint32_t, uint32_t) -> void',
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'databinding.h',
 contents: {classes: [{name: 'Observable',
 classComment: '    Observable is a wrapper for a type that sends a notification    each time the value it wraps changes.    ',
 publicMethods: [{name: 'subscribe',
 signature: '(std::function<void ()>) -> std::function<T ()>',
 description: ''}, {name: 'setValue',
 signature: '(T) -> void',
 description: ''}]}, {name: 'ObservableCollection',
 classComment: '    An observer for a type that notifies on other changes besides    assignment, such as adding/removing/modifying elements in    the collection.    ',
 publicMethods: [{name: 'clear',
 signature: '() -> void',
 description: ''}, {name: 'subscribeItemAdded',
 signature: '(Bindable *) -> void',
 description: ''}, {name: 'operator[]',
 signature: '(std::size_t) -> Item &',
 description: ''}, {name: 'operator[]',
 signature: '(std::size_t) -> const Item &',
 description: ''}, {name: 'size',
 signature: '() -> std::size_t',
 description: ''}]}, {name: 'Bindable',
 classComment: '    A Bindable is the link between an Observable and a    UI Element. An Application can own any number of    observable values. UI Elements can expose certain    values that an application might want to have access    to. Bindable can subscribe to notification changes    from an Observable, and then notify its parent    UI Element about the change, and allows the element    to access the value.    The template parameter Binding is expected to be    an Enum Class that identifies a UI Element-specific    property that can be bound. For example,     TextBox::Bindings holds all of the properties that    can be bound, such as its Text value. This is an    easy way to identify which property changed when    notifying the parent UI object.    ',
 publicMethods: [{name: 'notifyChange',
 signature: '() -> void',
 description: '        Indicates to the parent UI element that the        Observable this binding subscribed to changed        its value.        '}, {name: 'getValue',
 signature: '() -> Value',
 description: '        Gets the current value from the Observable        '}, {name: 'bindTo',
 signature: '(Observable<Value> &) -> void',
 description: '        Subscribes to change events from the Observable,        and gets a getter function from it.        '}]}, {name: 'BindableCollection',
 classComment: '',
 publicMethods: [{name: 'clearItems',
 signature: '() -> void',
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'debug.h',
 contents: {classes: [], freeFunctions: [{name: 'drawBox',
 signature: '(uint32_t *, uint32_t, uint32_t, uint32_t, uint32_t) -> void',
 description: '    Renders a hollow box outline into the given buffer    '}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'element_layout.h',
 contents: {classes: [], freeFunctions: [{name: 'getConstructorType',
 signature: '(Saturn::Parse::Constructor) -> std::optional<std::variant<KnownContainers, KnownElements> >',
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'layout.h',
 contents: {classes: [], freeFunctions: [{name: 'parseGridMeta',
 signature: '(Saturn::Parse::Constructor, int &) -> bool',
 description: ''}, {name: 'parseMeta',
 signature: '() -> int',
 description: ''}, {name: 'finishContainer',
 signature: '(Apollo::Elements::Container *, Apollo::Elements::Container *, Saturn::Parse::List *) -> std::optional<Container *>',
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'renderer.h',
 contents: {classes: [{name: 'Renderer',
 classComment: '',
 publicMethods: [{name: 'drawRectangle',
 signature: '(uint32_t, const Elements::Bounds &, const Elements::Bounds &) -> void',
 description: ''}, {name: 'drawText',
 signature: '(const Apollo::Text::TextLayout &, const Elements::Bounds &, const Elements::Bounds &, uint32_t) -> void',
 description: ''}, {name: 'getTextRenderer',
 signature: '() -> Text::Renderer *',
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'text.h',
 contents: {classes: [{name: 'FaceCache',
 classComment: '',
 publicMethods: [{name: 'addCache',
 signature: '(int, Apollo::Text::Style, uint32_t) -> void',
 description: ''}, {name: 'getGlyphCache',
 signature: '(Apollo::Text::Style, uint32_t) -> std::optional<Cache *>',
 description: ''}]}, {name: 'Renderer',
 classComment: '    Renderer handles the layout, positioning and rendering of text    into a window\'s framebuffer    ',
 publicMethods: [{name: 'drawText',
 signature: '(const Apollo::Text::TextLayout &, const Apollo::Elements::Bounds &, const Apollo::Elements::Bounds &, uint32_t) -> void',
 description: '        Renders a prepared text layout to the stored window\'s framebuffer,        with alpha blending.        '}, {name: 'layoutText',
 signature: '(const char *, uint32_t, uint32_t, Apollo::Text::Style, bool, uint32_t) -> Apollo::Text::TextLayout',
 description: '        Prepares each glyph\'s bitmap with FreeType, positions each        glyph with optional kerning, and applies line wrapping.        Allows the use of ANSI escape sequences in text to change        the colour of glyphs.        '}]}, {name: 'Glyph',
 classComment: '    Represents a single printable character    ',
 publicMethods: [{name: 'copyImage',
 signature: '() -> int',
 description: ''}, {name: 'isValid',
 signature: '() -> bool',
 description: ''}]}, {name: 'BoundingBox',
 classComment: '',
 publicMethods: []}, {name: 'TextLayout',
 classComment: '    Stores the info necessary to render some text.    If the text doesn\'t change then this can be cached    and reused    ',
 publicMethods: []}, {name: 'Cache',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'createRenderer',
 signature: '(Apollo::Window *) -> Apollo::Text::Renderer *',
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'window.h',
 contents: {classes: [{name: 'Window',
 classComment: '    Represents a GUI Window. Window uses double buffering,    all rendering is done with the front framebuffer and then    gets copied to the back buffer with blitBackBuffer, which    is a shared memory buffer from the Window Manager    ',
 publicMethods: [{name: 'getFramebuffer',
 signature: '() -> uint32_t *',
 description: '        Gets the front buffer to render to        '}, {name: 'getBackgroundColour',
 signature: '() -> uint32_t',
 description: ''}, {name: 'setBackgroundColour',
 signature: '(uint32_t) -> void',
 description: ''}, {name: 'getWidth',
 signature: '() -> uint32_t',
 description: ''}, {name: 'getHeight',
 signature: '() -> uint32_t',
 description: ''}, {name: 'blitBackBuffer',
 signature: '() -> void',
 description: '        Copies the front buffer\'s contents to the backbuffer,        only copying areas previously marked dirty with markAreaDirty        '}, {name: 'markAreaDirty',
 signature: '(uint32_t, uint32_t, uint32_t, uint32_t) -> void',
 description: '        Indicates that the given rectangle is dirty and should be        copied to the backbuffer on the next blitBackBuffer call.        Can be called multiple times before calling blit, which        will expand the dirty area to the min and max of the current        and new areas.        '}, {name: 'resize',
 signature: '(uint32_t, uint32_t) -> void',
 description: ''}, {name: 'setRenderer',
 signature: '(Apollo::Renderer *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Elements::UIElement *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Elements::UIElement *, const std::vector<Elements::MetaData> &) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Elements::Container *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Elements::Container *, const std::vector<Elements::MetaData> &) -> void',
 description: ''}, {name: 'layoutChildren',
 signature: '() -> void',
 description: ''}, {name: 'getChildBounds',
 signature: '(const Elements::UIElement *) -> Elements::Bounds',
 description: ''}, {name: 'layoutText',
 signature: '(Apollo::Text::Renderer *) -> void',
 description: ''}, {name: 'render',
 signature: '(Apollo::Renderer *, Elements::Bounds, Elements::Bounds) -> void',
 description: ''}, {name: 'render',
 signature: '() -> void',
 description: ''}, {name: 'layoutText',
 signature: '() -> void',
 description: ''}, {name: 'requestLayoutText',
 signature: '(Apollo::Elements::UIElement *) -> void',
 description: ''}, {name: 'requestRender',
 signature: '(Apollo::Elements::UIElement *) -> void',
 description: ''}]}, {name: 'WindowBuffer',
 classComment: '',
 publicMethods: []}, {name: 'DirtyArea',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'createWindow',
 signature: '(uint32_t, uint32_t) -> Apollo::Window *',
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'container.h',
 contents: {classes: [{name: 'Container',
 classComment: '    A Container is an element that arranges multiple child    elements in some specific layout.    ',
 publicMethods: [{name: 'addChild',
 signature: '(Apollo::Elements::UIElement *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::UIElement *, const std::vector<MetaData> &) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::Container *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::Container *, const std::vector<MetaData> &) -> void',
 description: ''}, {name: 'layoutChildren',
 signature: '() -> void',
 description: ''}, {name: 'getChildBounds',
 signature: '(const Apollo::Elements::UIElement *) -> Apollo::Elements::Bounds',
 description: ''}, {name: 'requestLayoutText',
 signature: '(Apollo::Elements::UIElement *) -> void',
 description: ''}, {name: 'requestRender',
 signature: '(Apollo::Elements::UIElement *) -> void',
 description: ''}]}, {name: 'MetaData',
 classComment: '',
 publicMethods: []}, {name: 'ContainedElement',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'control.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'element.h',
 contents: {classes: [{name: 'UIElement',
 classComment: '    Base class for all elements    ',
 publicMethods: [{name: 'onChange',
 signature: '(Apollo::Elements::UIElement::Bindings) -> void',
 description: ''}, {name: 'getDesiredWidth',
 signature: '() -> int',
 description: ''}, {name: 'getDesiredHeight',
 signature: '() -> int',
 description: ''}, {name: 'getParent',
 signature: '() -> Apollo::Elements::Container *',
 description: ''}, {name: 'setParent',
 signature: '(Apollo::Elements::Container *) -> void',
 description: ''}, {name: 'getBounds',
 signature: '() -> Apollo::Elements::Bounds',
 description: ''}, {name: 'layoutText',
 signature: '(Apollo::Text::Renderer *) -> void',
 description: ''}, {name: 'render',
 signature: '(Apollo::Renderer *, Apollo::Elements::Bounds, Apollo::Elements::Bounds) -> void',
 description: ''}, {name: 'requestLayoutText',
 signature: '() -> void',
 description: ''}, {name: 'requestRender',
 signature: '() -> void',
 description: ''}]}, {name: 'Bounds',
 classComment: '',
 publicMethods: []}, {name: 'Margins',
 classComment: '',
 publicMethods: []}, {name: 'Configuration',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'adjustForAlignment',
 signature: '(uint32_t, Apollo::Elements::Alignment, uint32_t, uint32_t) -> uint32_t',
 description: ''}, {name: 'parseElement',
 signature: '(Saturn::Parse::SExpression *, Apollo::Elements::Configuration &) -> bool',
 description: '    Base parsing function that dervied elements use as a     fallback to parse a single constructor at a time    '}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'grid.h',
 contents: {classes: [{name: 'Grid',
 classComment: '    A Grid is a container that arranges multiple child    elements in rows and columns.    ',
 publicMethods: [{name: 'addChild',
 signature: '(Apollo::Elements::UIElement *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::UIElement *, const int &) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::Container *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::Container *, const int &) -> void',
 description: ''}, {name: 'layoutChildren',
 signature: '() -> void',
 description: ''}, {name: 'getChildBounds',
 signature: '(const Apollo::Elements::UIElement *) -> Apollo::Elements::Bounds',
 description: ''}, {name: 'layoutText',
 signature: '(Apollo::Text::Renderer *) -> void',
 description: ''}, {name: 'render',
 signature: '(Apollo::Renderer *, Apollo::Elements::Bounds, Apollo::Elements::Bounds) -> void',
 description: ''}, {name: 'clearTemplateItems',
 signature: '() -> void',
 description: ''}]}, {name: 'GridElement',
 classComment: '',
 publicMethods: []}, {name: 'RowColumnDefinition',
 classComment: '',
 publicMethods: []}, {name: 'GridConfiguration',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'parseGrid',
 signature: '(Saturn::Parse::SExpression *) -> std::optional<GridConfiguration>',
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'label.h',
 contents: {classes: [{name: 'Label',
 classComment: '    A Label is a UI Element that displays a block of text. The text can be changed     at runtime with code, but isn\'t user interactive like a textbox is.    ',
 publicMethods: [{name: 'layoutText',
 signature: '(Apollo::Text::Renderer *) -> void',
 description: ''}, {name: 'render',
 signature: '(Apollo::Renderer *, Apollo::Elements::Bounds, Apollo::Elements::Bounds) -> void',
 description: ''}, {name: 'onChange',
 signature: '(Apollo::Elements::Label::Bindings) -> void',
 description: ''}]}, {name: 'LabelConfiguration',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'parseLabel',
 signature: '(Saturn::Parse::SExpression *) -> std::optional<LabelConfiguration>',
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'listview.h',
 contents: {classes: [{name: 'ListView',
 classComment: '',
 publicMethods: [{name: 'addChild',
 signature: '(Apollo::Elements::UIElement *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::UIElement *, const int &) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::Container *) -> void',
 description: ''}, {name: 'addChild',
 signature: '(Apollo::Elements::Container *, const int &) -> void',
 description: ''}, {name: 'layoutChildren',
 signature: '() -> void',
 description: ''}, {name: 'getChildBounds',
 signature: '(const Apollo::Elements::UIElement *) -> Apollo::Elements::Bounds',
 description: ''}, {name: 'layoutText',
 signature: '(Apollo::Text::Renderer *) -> void',
 description: ''}, {name: 'render',
 signature: '(Apollo::Renderer *, Apollo::Elements::Bounds, Apollo::Elements::Bounds) -> void',
 description: ''}, {name: 'clearTemplateItems',
 signature: '() -> void',
 description: ''}]}, {name: 'ListViewConfiguration',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'parseListView',
 signature: '(Saturn::Parse::SExpression *) -> std::optional<ListViewConfiguration>',
 description: ''}]}}]};export default topLevel