let topLevel = {type: 'dir',
 classType: 'dirType',
 name: '',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'kernel',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'arch',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'i386',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'cpu',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'acpi.h',
 contents: {classes: [{name: 'RootSystemDescriptionPointer',
 classComment: '',
 publicMethods: []}, {name: 'SystemDescriptionTableHeader',
 classComment: '',
 publicMethods: []}, {name: 'RootSystemDescriptorTable',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'parseACPITables',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'findRSDP',
 signature: [],
return: {link: '/kernel/arch/i386/cpu/acpi.h', type: 'CPU::RootSystemDescriptionPointer'},
 description: ''}, {name: 'verifyRSDPChecksum',
 signature: [{link: '/kernel/arch/i386/cpu/acpi.h', type: 'const CPU::RootSystemDescriptionPointer &'}],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'getRootSystemHeader',
 signature: [{link: '', type: 'uintptr_t'}],
return: {link: '/kernel/arch/i386/cpu/acpi.h', type: 'CPU::RootSystemDescriptorTable *'},
 description: ''}, {name: 'verifySystemHeaderChecksum',
 signature: [{link: '/kernel/arch/i386/cpu/acpi.h', type: 'CPU::SystemDescriptionTableHeader *'}],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'getAPICHeader',
 signature: [{link: '/kernel/arch/i386/cpu/acpi.h', type: 'CPU::RootSystemDescriptorTable *'}, {link: '', type: 'uint32_t'}],
return: {link: '/kernel/arch/i386/cpu/acpi.h', type: 'CPU::SystemDescriptionTableHeader *'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'apic.h',
 contents: {classes: [{name: 'LocalAPICHeader',
 classComment: '',
 publicMethods: []}, {name: 'IOAPICHeader',
 classComment: '',
 publicMethods: []}, {name: 'InterruptSourceOverride',
 classComment: '',
 publicMethods: []}, {name: 'LocalAPICNMI',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'writeLocalAPICRegister',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'signalEndOfInterrupt',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'initialize',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'loadAPICStructures',
 signature: [{link: '', type: 'uintptr_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'calibrateAPICTimer',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'setAPICTimer',
 signature: [{link: '', type: 'APIC::LVT_TimerMode'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'pic.h',
 contents: {classes: [], freeFunctions: [{name: 'disable',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'remapIRQs',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'maskAllInterrupts',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'rtc.h',
 contents: {classes: [], freeFunctions: [{name: 'enable',
 signature: [{link: '', type: 'uint8_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'disable',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'reset',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'sse.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'stack_frames.h',
 contents: {classes: [{name: 'InterruptStackFrame',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'tsc.h',
 contents: {classes: [], freeFunctions: [{name: 'startCalibration',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'stopCalibration',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getTicksPerSecond',
 signature: [],
return: {link: '', type: 'uint64_t'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'tss.h',
 contents: {classes: [{name: 'TSS',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'setupTSS',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '/kernel/arch/i386/cpu/tss.h', type: 'CPU::TSS *'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'gdt',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'gdt.h',
 contents: {classes: [{name: 'Descriptor',
 classComment: '',
 publicMethods: []}, {name: 'DescriptorPointer',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'setup',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'encodeEntry',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint8_t'}, {link: '', type: 'uint8_t'}, {link: '', type: 'bool'}],
return: {link: '/kernel/arch/i386/gdt/gdt.h', type: 'GDT::Descriptor'},
 description: ''}, {name: 'addTSSEntry',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'idt',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'idt.h',
 contents: {classes: [{name: 'Entry',
 classComment: '',
 publicMethods: []}, {name: 'EntryPointer',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'setup',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'encodeEntry',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint16_t'}, {link: '', type: 'bool'}],
return: {link: '/kernel/arch/i386/idt/idt.h', type: 'IDT::Entry'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'memory',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'physical_memory_manager.h',
 contents: {classes: [{name: 'PhysicalMemoryManager',
 classComment: '',
 publicMethods: [{name: 'allocatePage',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'uintptr_t'},
 description: '        returns a physical address to a free page, and tracks stats.        we can\'t get the address of the next free page yet,        because its written in the page itself which needs to be first        page mapped before it can be read. so, each call to         allocatePage(count) needs to be followed by finishAllocation(count)        '}, {name: 'finishAllocation',
 signature: [{link: '', type: 'uintptr_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        here pageAddress is the virtual address mapped from the physical        address of the previous call to allocatePage. now we can read the        page and get the physical address of the next page        '}, {name: 'freePage',
 signature: [{link: '', type: 'uintptr_t'}, {link: '', type: 'uintptr_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'report',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getFreePages',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'getTotalPages',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}]}, {name: 'Page',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'scan_memory.h',
 contents: {classes: [{name: 'MemoryMapRecord',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'scan',
 signature: [{link: '', type: 'uintptr_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'virtual_memory_manager.h',
 contents: {classes: [{name: 'VirtualMemoryManager',
 classComment: '',
 publicMethods: [{name: 'cleanup',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'cleanupClonePageTables',
 signature: [{link: '/kernel/arch/i386/memory/virtual_memory_manager.h', type: 'Memory::PageDirectory &'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getPageDirectory',
 signature: [],
return: {link: '/kernel/arch/i386/memory/virtual_memory_manager.h', type: 'Memory::PageDirectory'},
 description: ''}, {name: 'setPhysicalManager',
 signature: [{link: '/kernel/arch/i386/memory/physical_memory_manager.h', type: 'Memory::PhysicalMemoryManager *'}],
return: {link: '', type: 'void'},
 description: '        Only called once, when kernel_main starts. The pre-kernel setup        creates a PhysicalMemoryManager at a low address, and once        we jump to the higher half kernel we create a brand new one        with its values copied. Same thing for the VirtualMemoryManager,        once it gets copied it has a pointer to the low address PMM,        hence why we replace it with this.        '}, {name: 'initialize',
 signature: [{link: '/kernel/arch/i386/memory/physical_memory_manager.h', type: 'Memory::PhysicalMemoryManager *'}],
return: {link: '', type: 'void'},
 description: '        Normally this would be a constructor, but:        1) we need a static instance declared for the prekernel to reserve            space for it, and the actual construction has to wait until setupKernel()        2) we don\'t have an allocator setup before the VMM is setup, so we couldn\'t            just replace 1) with a pointer instead of a value and = new instead of             initialize        '}, {name: 'allocatePages',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uintptr_t'}],
return: {link: '', type: 'uintptr_t'},
 description: '        ensures that the appropriate page table exists, and creates one        if necessary        '}, {name: 'map',
 signature: [{link: '', type: 'uintptr_t'}, {link: '', type: 'uintptr_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        maps the virtual address to the physical address        note: the page table for the address must already exist, so        allocatePages should be called before map        '}, {name: 'unmap',
 signature: [{link: '', type: 'uintptr_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        unmaps the virtual address        TODO - should this also free the physical address?        '}, {name: 'freePages',
 signature: [{link: '', type: 'uintptr_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'activate',
 signature: [],
return: {link: '', type: 'void'},
 description: '        enables paging and sets this VMM\'s directory as the current one        reassigns directory to use the virtual address instead of physical        '}, {name: 'getPageStatus',
 signature: [{link: '', type: 'uintptr_t'}],
return: {link: '', type: 'Memory::PageStatus'},
 description: ''}, {name: 'HACK_setNextAddress',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'HACK_getNextAddress',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'cloneForUsermode',
 signature: [],
return: {link: '/kernel/arch/i386/memory/virtual_memory_manager.h', type: 'Memory::VirtualMemoryManager *'},
 description: ''}, {name: 'preallocateKernelPageTables',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'sharePages',
 signature: [{link: '', type: 'uint32_t'}, {link: '/kernel/arch/i386/memory/virtual_memory_manager.h', type: 'Memory::VirtualMemoryManager *'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'PageDirectory',
 classComment: '',
 publicMethods: []}, {name: 'PageTable',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}]}, 
{type: 'file',
 classType: 'fileType',
 name: 'task_context.h',
 contents: {classes: [{name: 'TaskContext',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}]}]}, 
{type: 'file',
 classType: 'fileType',
 name: 'ipc.h',
 contents: {classes: [{name: 'Mailbox',
 classComment: '',
 publicMethods: [{name: 'send',
 signature: [{link: '/kernel/ipc.h', type: 'IPC::Message *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'receive',
 signature: [{link: '/kernel/ipc.h', type: 'IPC::Message *'}],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'hasUnreadMessages',
 signature: [],
return: {link: '', type: 'bool'},
 description: '//bool receive(Message* message, MessageNamespace filter, uint32_t messageId);'}]}, {name: 'Message',
 classComment: '',
 publicMethods: []}, {name: 'MaximumMessageBuffer',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'multiboot.h',
 contents: {classes: [{name: 'MultibootInformation',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'hasValidMemoryMap',
 signature: [{link: '/kernel/multiboot.h', type: 'const Kernel::MultibootInformation *'}],
return: {link: '', type: 'bool'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'permissions.h',
 contents: {classes: [], freeFunctions: [{name: 'grantIOPort8',
 signature: [{link: '', type: 'uint16_t'}, {link: '', type: 'volatile uint8_t *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'grantIOPort16',
 signature: [{link: '', type: 'uint16_t'}, {link: '', type: 'volatile uint8_t *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'blockIOPort16',
 signature: [{link: '', type: 'uint16_t'}, {link: '', type: 'volatile uint8_t *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'grantIOPortRange',
 signature: [{link: '', type: 'uint16_t'}, {link: '', type: 'uint16_t'}, {link: '', type: 'volatile uint8_t *'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'scheduler.h',
 contents: {classes: [{name: 'LinkedList',
 classComment: '',
 publicMethods: [{name: 'insertBefore',
 signature: [{link: '', type: 'T *'}, {link: '', type: 'T *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'insertAfter',
 signature: [{link: '', type: 'T *'}, {link: '', type: 'T *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'append',
 signature: [{link: '', type: 'T *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'remove',
 signature: [{link: '', type: 'T *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getHead',
 signature: [],
return: {link: '', type: 'T *'},
 description: ''}, {name: 'isEmpty',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'IdGenerator',
 classComment: '    Tracks available task ids and allows them to be recycled    when a task exits    ',
 publicMethods: [{name: 'generateId',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'freeId',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'Scheduler',
 classComment: '',
 publicMethods: [{name: 'createKernelTask',
 signature: [{link: '', type: 'uintptr_t'}],
return: {link: '/kernel/scheduler.h', type: 'Kernel::Task *'},
 description: ''}, {name: 'createUserTask',
 signature: [{link: '', type: 'uintptr_t'}, {link: '', type: 'char *'}],
return: {link: '/kernel/scheduler.h', type: 'Kernel::Task *'},
 description: ''}, {name: 'notifyTimesliceExpired',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'scheduleTask',
 signature: [{link: '/kernel/scheduler.h', type: 'Kernel::Task *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'blockTask',
 signature: [{link: '', type: 'Kernel::BlockReason'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'unblockTask',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'enterIdle',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'setupTimeslice',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'sendMessage',
 signature: [{link: '', type: 'IPC::RecipientType'}, {link: '/kernel/ipc.h', type: 'IPC::Message *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'receiveMessage',
 signature: [{link: '/kernel/ipc.h', type: 'IPC::Message *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'receiveMessage',
 signature: [{link: '/kernel/ipc.h', type: 'IPC::Message *'}, {link: '', type: 'IPC::MessageNamespace'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'peekReceiveMessage',
 signature: [{link: '/kernel/ipc.h', type: 'IPC::Message *'}],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'getTask',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '/kernel/scheduler.h', type: 'Kernel::Task *'},
 description: ''}, {name: 'exitTask',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'exitKernelTask',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'cleanupTasks',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getCurrentTask',
 signature: [],
return: {link: '/kernel/scheduler.h', type: 'Kernel::Task *'},
 description: ''}]}, {name: 'Stack',
 classComment: '',
 publicMethods: []}, {name: 'SSEContext',
 classComment: '',
 publicMethods: []}, {name: 'Task',
 classComment: '',
 publicMethods: []}, {name: 'InitialKernelStack',
 classComment: '',
 publicMethods: []}, {name: 'TaskStack',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'services.h',
 contents: {classes: [{name: 'ServiceRegistry',
 classComment: '',
 publicMethods: [{name: 'receiveMessage',
 signature: [{link: '/kernel/ipc.h', type: 'IPC::Message *'}],
return: {link: '', type: 'void'},
 description: '        All public functions must create a MemoryGuard at the beginning        of the function.        ServiceRegistry allocates memory on the kernel heap, but doesn\'t run        in its own service, so the current heap when invoking a registry        function is most likely a user task\'s heap, so the registry\'s        member variables would be garbage.        '}, {name: 'receivePseudoMessage',
 signature: [{link: '', type: 'Kernel::ServiceType'}, {link: '/kernel/ipc.h', type: 'IPC::Message *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getServiceTaskId',
 signature: [{link: '', type: 'Kernel::ServiceType'}],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'isPseudoService',
 signature: [{link: '', type: 'Kernel::ServiceType'}],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'handleDriverIrq',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'MemoryGuard',
 classComment: '',
 publicMethods: []}, {name: 'RegisterService',
 classComment: '',
 publicMethods: []}, {name: 'RegisterDriver',
 classComment: '',
 publicMethods: []}, {name: 'RegisterDriverResult',
 classComment: '',
 publicMethods: []}, {name: 'DriverIrqReceived',
 classComment: '',
 publicMethods: []}, {name: 'RegisterPseudoService',
 classComment: '',
 publicMethods: []}, {name: 'RegisterServiceDenied',
 classComment: '',
 publicMethods: []}, {name: 'NotifyServiceReady',
 classComment: '',
 publicMethods: []}, {name: 'ServiceMeta',
 classComment: '',
 publicMethods: []}, {name: 'VGAServiceMeta',
 classComment: '',
 publicMethods: []}, {name: 'GenericServiceMeta',
 classComment: '',
 publicMethods: []}, {name: 'SubscribeServiceRegistered',
 classComment: '',
 publicMethods: []}, {name: 'NotifyServiceRegistered',
 classComment: '',
 publicMethods: []}, {name: 'RunProgram',
 classComment: '',
 publicMethods: []}, {name: 'RunResult',
 classComment: '',
 publicMethods: []}, {name: 'LinearFrameBufferFound',
 classComment: '',
 publicMethods: []}, {name: 'MapMemory',
 classComment: '',
 publicMethods: []}, {name: 'MapMemoryResult',
 classComment: '',
 publicMethods: []}, {name: 'ShareMemoryRequest',
 classComment: '    NOTE: For the ShareXY messages,    A refers to the task that wants to share memory    B refers to the task that A wants to share with    ',
 publicMethods: []}, {name: 'ShareMemoryInvitation',
 classComment: '    Sent by ServiceRegistry on behalf of the task (A) that sent    the initial ShareMemoryRequest, to the task (B) that A wants    to share memory with.    NOTE: Since memory sharing works per-page, size is always    a multiple of Memory::PageSize. B must allocate page-aligned space    to ensure it allocates completely unused pages. Don\'t just allocate    <size> bytes, pretend you are allocating <size / PageSize> pages.    Since the starting address of the space A wants to share might    not be page aligned, eg its just a random buffer, ShareMemoryResult    will give B the offset to the start of the buffer.    ',
 publicMethods: []}, {name: 'ShareMemoryResponse',
 classComment: '    Upon receiving a ShareMemoryInvitation, B must send A     a response, with the address of the buffer B allocated    when handling the invitation if accepted, or nothing    if not accepted.    ',
 publicMethods: []}, {name: 'ShareMemoryResult',
 classComment: '    Both A and B receive ShareMemoryResult once B sends    a ShareMemoryResponse.    ',
 publicMethods: []}, {name: 'KnownHardwareAddresses',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'handleMapMemory',
 signature: [{link: '/kernel/services.h', type: 'Kernel::MapMemory'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'handleShareMemoryRequest',
 signature: [{link: '/kernel/services.h', type: 'Kernel::ShareMemoryRequest'}],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'libc',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'include',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'assert.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'ctype.h',
 contents: {classes: [], freeFunctions: [{name: 'isalnum',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isalpha',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'islower',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isupper',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isdigit',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isxdigit',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iscntrl',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isgraph',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isspace',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isblank',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isprint',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'ispunct',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'errno.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'heap.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'initialize_libc.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'math.h',
 contents: {classes: [], freeFunctions: [{name: 'acos',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'acosf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'acosl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'asin',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'asinf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'asinl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'atan',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'atanf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'atanl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'atan2',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'atan2f',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'atan2l',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'cos',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'cosf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'cosl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'sin',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'sinf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'sinl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'tan',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'tanf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'tanl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'acosh',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'acoshf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'acoshl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'asinh',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'asinhf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'asinhl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'atanh',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'atanhf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'atanhl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'cosh',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'coshf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'coshl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'sinh',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'sinhf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'sinhl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'tanh',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'tanhf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'tanhl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'exp',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'expf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'expl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'exp2',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'exp2f',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'exp2l',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'expm1',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'expm1f',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'expm1l',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'frexp',
 signature: [{link: '', type: 'double'}, {link: '', type: 'int *'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'frexpf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'int *'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'frexpl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'int *'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'ilogb',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'ilogbf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'ilogbl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'ldexp',
 signature: [{link: '', type: 'double'}, {link: '', type: 'int'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'ldexpf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'int'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'ldexpl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'int'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'log',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'logf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'logl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'log10',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'log10f',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'log10l',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'log1p',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'log1pf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'log1pl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'log2',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'log2f',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'log2l',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'logb',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'logbf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'logbl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'modf',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double *'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'modff',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float *'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'modfl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double *'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'scalbn',
 signature: [{link: '', type: 'double'}, {link: '', type: 'int'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'scalbnf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'int'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'scalbnl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'int'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'scalbln',
 signature: [{link: '', type: 'double'}, {link: '', type: 'long'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'scalblnf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'long'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'scalblnl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'cbrt',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'cbrtf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'cbrtl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'fabs',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'fabsf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'fabsl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'hypot',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'hypotf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'hypotl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'pow',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'powf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'powl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'sqrt',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'sqrtf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'sqrtl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'erf',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'erff',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'erfl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'erfc',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'erfcf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'erfcl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'lgamma',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'lgammaf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'lgammal',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'tgamma',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'tgammaf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'tgammal',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'ceil',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'ceilf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'ceill',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'floor',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'floorf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'floorl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'nearbyint',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'nearbyintf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'nearbyintl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'rint',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'rintf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'rintl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'lrint',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'lrintf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'lrintl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'llrint',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'llrintf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'llrintl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'round',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'roundf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'roundl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'lround',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'lroundf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'lroundl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'llround',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'llroundf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'llroundl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'trunc',
 signature: [{link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'truncf',
 signature: [{link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'truncl',
 signature: [{link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'fmod',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'fmodf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'fmodl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'remainder',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'remainderf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'remainderl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'remquo',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}, {link: '', type: 'int *'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'remquof',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}, {link: '', type: 'int *'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'remquol',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}, {link: '', type: 'int *'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'copysign',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'copysignf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'copysignl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'nan',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'nanf',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'nanl',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'nextafter',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'nextafterf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'nextafterl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'nexttoward',
 signature: [{link: '', type: 'double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'nexttowardf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'long double'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'nexttowardl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'fdim',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'fdimf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'fdiml',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'fmax',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'fmaxf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'fmaxl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'fmin',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'fminf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'fminl',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'fma',
 signature: [{link: '', type: 'double'}, {link: '', type: 'double'}, {link: '', type: 'double'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'fmaf',
 signature: [{link: '', type: 'float'}, {link: '', type: 'float'}, {link: '', type: 'float'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'fmal',
 signature: [{link: '', type: 'long double'}, {link: '', type: 'long double'}, {link: '', type: 'long double'}],
return: {link: '', type: 'long double'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'setjmp.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'stdio.h',
 contents: {classes: [], freeFunctions: [{name: 'kprintf',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'printf',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'sprintf',
 signature: [{link: '', type: 'char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fclose',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fflush',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fopen',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'FILE *'},
 description: ''}, {name: 'fprintf',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fscanf',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fgetc',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fgets',
 signature: [{link: '', type: 'char *'}, {link: '', type: 'int'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'fputc',
 signature: [{link: '', type: 'int'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fputs',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'getc',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'putc',
 signature: [{link: '', type: 'int'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fread',
 signature: [{link: '', type: 'void *'}, {link: '', type: 'size_t'}, {link: '', type: 'size_t'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'fwrite',
 signature: [{link: '', type: 'const void *'}, {link: '', type: 'size_t'}, {link: '', type: 'size_t'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'fgetpos',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'fpos_t *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fseek',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'long'}, {link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fsetpos',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'const fpos_t *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'ftell',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'setbuf',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'char *'}],
return: {link: '', type: 'void'},
 description: '//TODO'}, {name: 'setvbuf',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'char *'}, {link: '', type: 'int'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'snprintf',
 signature: [{link: '', type: 'char *'}, {link: '', type: 'size_t'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vfprintf',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'const char *'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vsnprintf',
 signature: [{link: '', type: 'char *'}, {link: '', type: 'size_t'}, {link: '', type: 'const char *'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vsprintf',
 signature: [{link: '', type: 'char *'}, {link: '', type: 'const char *'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vprintf',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'scanf',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'sscanf',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vfscanf',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'const char *'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vsscanf',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vscanf',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'getchar',
 signature: [],
return: {link: '', type: 'int'},
 description: ''}, {name: 'putchar',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'puts',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'ungetc',
 signature: [{link: '', type: 'int'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'rewind',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'clearerr',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'feof',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'ferror',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'perror',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'remove',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'rename',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'tmpfile',
 signature: [],
return: {link: '', type: 'FILE *'},
 description: ''}, {name: 'tmpnam',
 signature: [{link: '', type: 'char *'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'freopen',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'FILE *'},
 description: ''}, {name: 'vasprintf',
 signature: [{link: '', type: 'char **'}, {link: '', type: 'const char *'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: '//for bsd_locale_fallbacks'}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'stdlib.h',
 contents: {classes: [{name: 'div_t',
 classComment: '//TODO',
 publicMethods: []}, {name: 'ldiv_t',
 classComment: '',
 publicMethods: []}, {name: 'lldiv_t',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'malloc',
 signature: [{link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'free',
 signature: [{link: '', type: 'void *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'aligned_alloc',
 signature: [{link: '', type: 'size_t'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'realloc',
 signature: [{link: '', type: 'void *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'strtol',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'char **'}, {link: '', type: 'int'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'qsort',
 signature: [{link: '', type: 'void *'}, {link: '', type: 'size_t'}, {link: '', type: 'size_t'}, {link: '', type: 'int (*)(const void *, const void *)'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'div',
 signature: [{link: '', type: 'int'}, {link: '', type: 'int'}],
return: {link: '', type: 'div_t'},
 description: ''}, {name: 'ldiv',
 signature: [{link: '', type: 'long'}, {link: '', type: 'long'}],
return: {link: '', type: 'ldiv_t'},
 description: ''}, {name: 'lldiv',
 signature: [{link: '', type: 'long long'}, {link: '', type: 'long long'}],
return: {link: '', type: 'lldiv_t'},
 description: ''}, {name: 'atof',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'atoi',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'atol',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'atoll',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'strtod',
 signature: [{link: '', type: 'const char *__restrict'}, {link: '', type: 'char **__restrict'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'strtof',
 signature: [{link: '', type: 'const char *__restrict'}, {link: '', type: 'char **__restrict'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'strtold',
 signature: [{link: '', type: 'const char *__restrict'}, {link: '', type: 'char **__restrict'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'strtoll',
 signature: [{link: '', type: 'const char *__restrict'}, {link: '', type: 'char **__restrict'}, {link: '', type: 'int'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'strtoul',
 signature: [{link: '', type: 'const char *__restrict'}, {link: '', type: 'char **__restrict'}, {link: '', type: 'int'}],
return: {link: '', type: 'unsigned long'},
 description: ''}, {name: 'strtoull',
 signature: [{link: '', type: 'const char *__restrict'}, {link: '', type: 'char **__restrict'}, {link: '', type: 'int'}],
return: {link: '', type: 'unsigned long long'},
 description: ''}, {name: 'rand',
 signature: [],
return: {link: '', type: 'int'},
 description: ''}, {name: 'srand',
 signature: [{link: '', type: 'unsigned int'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'calloc',
 signature: [{link: '', type: 'size_t'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'abort',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'atexit',
 signature: [{link: '', type: 'void (*)()'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'exit',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'void'},
 description: ''}, {name: '_Exit',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getenv',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'system',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'bsearch',
 signature: [{link: '', type: 'const void *'}, {link: '', type: 'const void *'}, {link: '', type: 'size_t'}, {link: '', type: 'size_t'}, {link: '', type: 'int (*)(const void *)'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'abs',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'labs',
 signature: [{link: '', type: 'long'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'llabs',
 signature: [{link: '', type: 'long long'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'mblen',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'mbtowc',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const char *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'wctomb',
 signature: [{link: '', type: 'char *'}, {link: '', type: 'wchar_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'mbstowcs',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const char *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'wcstombs',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'rand_s',
 signature: [{link: '', type: 'unsigned int *'}],
return: {link: '', type: 'errno_t'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'string.h',
 contents: {classes: [], freeFunctions: [{name: 'prekernel_memset',
 signature: [{link: '', type: 'void *'}, {link: '', type: 'int'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'memset',
 signature: [{link: '', type: 'void *'}, {link: '', type: 'int'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'memcmp',
 signature: [{link: '', type: 'const void *'}, {link: '', type: 'const void *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'memmove',
 signature: [{link: '', type: 'void *'}, {link: '', type: 'const void *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'memcpy',
 signature: [{link: '', type: 'void *'}, {link: '', type: 'const void *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'strlen',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'strlen_s',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'strcmp',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'strncmp',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'strrchr',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'int'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'memchr',
 signature: [{link: '', type: 'const void *'}, {link: '', type: 'int'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'void *'},
 description: ''}, {name: 'strstr',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'strcpy',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'const char *__restrict'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'strncpy',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'const char *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'strcat',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'const char *__restrict'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'strncat',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'const char *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'char *'},
 description: '//TODO'}, {name: 'strcoll',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'strxfrm',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'const char *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'strchr',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'int'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'strcspn',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'strpbrk',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'strspn',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'const char *'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'strtok',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'const char *__restrict'}],
return: {link: '', type: 'char *'},
 description: ''}, {name: 'strerror',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'char *'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'system_calls.h',
 contents: {classes: [], freeFunctions: [{name: 'sleep',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'print',
 signature: [{link: '', type: 'int'}, {link: '', type: 'int'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'time.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'wchar.h',
 contents: {classes: [{name: 'mbstate_t',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'wcscpy',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcsncpy',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wmemmove',
 signature: [{link: '', type: 'wchar_t *'}, {link: '', type: 'const wchar_t *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wmemcpy',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wmemset',
 signature: [{link: '', type: 'wchar_t *'}, {link: '', type: 'wchar_t'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcschr',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'wchar_t'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcspbrk',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'const wchar_t *'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcsrchr',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'wchar_t'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcsstr',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'const wchar_t *'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wmemchr',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'wchar_t'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcscat',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcsncat',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcscmp',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'const wchar_t *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'wcscoll',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'const wchar_t *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'wcsncmp',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'const wchar_t *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'wcsxfrm',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'wcscspn',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'const wchar_t *'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wcslen',
 signature: [{link: '', type: 'const wchar_t *'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'wcsspn',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'const wchar_t *'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'wcstok',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'wchar_t **__restrict'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'wmemcmp',
 signature: [{link: '', type: 'const wchar_t *'}, {link: '', type: 'const wchar_t *'}, {link: '', type: 'size_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'wcsftime',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'size_t'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'const struct tm *__restrict'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'btowc',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'wctob',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'mbsinit',
 signature: [{link: '', type: 'const mbstate_t *'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'mbrlen',
 signature: [{link: '', type: 'const char *__restrict'}, {link: '', type: 'size_t'}, {link: '', type: 'mbstate_t *__restrict'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'mbrtowc',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const char *__restrict'}, {link: '', type: 'size_t'}, {link: '', type: 'mbstate_t *__restrict'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'wcrtomb',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'wchar_t'}, {link: '', type: 'mbstate_t *__restrict'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'mbsrtowcs',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'const char **__restrict'}, {link: '', type: 'size_t'}, {link: '', type: 'mbstate_t *__restrict'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'wcsrtombs',
 signature: [{link: '', type: 'char *__restrict'}, {link: '', type: 'const wchar_t **__restrict'}, {link: '', type: 'size_t'}, {link: '', type: 'mbstate_t *__restrict'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'fwprintf',
 signature: [{link: '', type: 'FILE *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'swprintf',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'size_t'}, {link: '', type: 'const wchar_t *__restrict'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vfwprintf',
 signature: [{link: '', type: 'FILE *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vswprintf',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'size_t'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vwprintf',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'wprintf',
 signature: [{link: '', type: 'const wchar_t *__restrict'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fwscanf',
 signature: [{link: '', type: 'FILE *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'swscanf',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vfwscanf',
 signature: [{link: '', type: 'FILE *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vswscanf',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'vwscanf',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'va_list'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'wscanf',
 signature: [{link: '', type: 'const wchar_t *__restrict'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fgetwc',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'fgetws',
 signature: [{link: '', type: 'wchar_t *__restrict'}, {link: '', type: 'int'}, {link: '', type: 'FILE *__restrict'}],
return: {link: '', type: 'wchar_t *'},
 description: ''}, {name: 'fputwc',
 signature: [{link: '', type: 'wchar_t'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'fputws',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'FILE *__restrict'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'fwide',
 signature: [{link: '', type: 'FILE *'}, {link: '', type: 'int'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'getwc',
 signature: [{link: '', type: 'FILE *'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'getwchar',
 signature: [],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'putwc',
 signature: [{link: '', type: 'wchar_t'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'putwchar',
 signature: [{link: '', type: 'wchar_t'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'ungetwc',
 signature: [{link: '', type: 'wint_t'}, {link: '', type: 'FILE *'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'wcstod',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'wchar_t **__restrict'}],
return: {link: '', type: 'double'},
 description: ''}, {name: 'wcstof',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'wchar_t **__restrict'}],
return: {link: '', type: 'float'},
 description: ''}, {name: 'wcstold',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'wchar_t **__restrict'}],
return: {link: '', type: 'long double'},
 description: ''}, {name: 'wcstol',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'wchar_t **__restrict'}, {link: '', type: 'int'}],
return: {link: '', type: 'long'},
 description: ''}, {name: 'wcstoll',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'wchar_t **__restrict'}, {link: '', type: 'int'}],
return: {link: '', type: 'long long'},
 description: ''}, {name: 'wcstoul',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'wchar_t **__restrict'}, {link: '', type: 'int'}],
return: {link: '', type: 'unsigned long'},
 description: ''}, {name: 'wcstoull',
 signature: [{link: '', type: 'const wchar_t *__restrict'}, {link: '', type: 'wchar_t **__restrict'}, {link: '', type: 'int'}],
return: {link: '', type: 'unsigned long long'},
 description: ''}, {name: 'wcsnrtombs',
 signature: [{link: '', type: 'char *'}, {link: '', type: 'const wchar_t **'}, {link: '', type: 'size_t'}, {link: '', type: 'size_t'}, {link: '', type: 'mbstate_t *'}],
return: {link: '', type: 'size_t'},
 description: ''}, {name: 'mbsnrtowcs',
 signature: [{link: '', type: 'wchar_t *'}, {link: '', type: 'const char **'}, {link: '', type: 'size_t'}, {link: '', type: 'size_t'}, {link: '', type: 'mbstate_t *'}],
return: {link: '', type: 'size_t'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'wctype.h',
 contents: {classes: [], freeFunctions: [{name: 'iswalnum',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswalpha',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswblank',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswcntrl',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswdigit',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswgraph',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswlower',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswprint',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswpunct',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswspace',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswupper',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswxdigit',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'iswctype',
 signature: [{link: '', type: 'wint_t'}, {link: '', type: 'wctype_t'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'wctype',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'wctype_t'},
 description: ''}, {name: 'towlower',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'towupper',
 signature: [{link: '', type: 'wint_t'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'towctrans',
 signature: [{link: '', type: 'wint_t'}, {link: '', type: 'wctrans_t'}],
return: {link: '', type: 'wint_t'},
 description: ''}, {name: 'wctrans',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'wctrans_t'},
 description: ''}]}}]}]}, {type: 'dir',
 classType: 'dirType',
 name: 'saturn',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'gemini',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'environment.h',
 contents: {classes: [{name: 'Object',
 classComment: '',
 publicMethods: [{name: 'addChild',
 signature: [{link: '', type: 'std::string_view'}, {link: '/saturn/gemini/environment.h', type: 'Saturn::Gemini::Object *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getChild',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/saturn/gemini/environment.h', type: 'Saturn::Gemini::Object *'},
 description: ''}]}, {name: 'Integer',
 classComment: '',
 publicMethods: []}, {name: 'Boolean',
 classComment: '',
 publicMethods: []}, {name: 'List',
 classComment: '',
 publicMethods: []}, {name: 'Function',
 classComment: '',
 publicMethods: [{name: 'call',
 signature: [{link: '/saturn/gemini/environment.h', type: 'Saturn::Gemini::List *'}],
return: {link: '', type: 'Saturn::Gemini::CallResult'},
 description: ''}]}, {name: 'Environment',
 classComment: '',
 publicMethods: [{name: 'lookupFunction',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::Symbol *'}],
return: {link: '', type: 'std::optional<Function *>'},
 description: ''}, {name: 'lookupObject',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::Symbol *'}],
return: {link: '', type: 'std::optional<Object *>'},
 description: ''}, {name: 'lookupObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'std::optional<Object *>'},
 description: ''}, {name: 'addFunction',
 signature: [{link: '', type: 'std::string_view'}, {link: '/saturn/gemini/environment.h', type: 'Saturn::Gemini::Function *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addObject',
 signature: [{link: '', type: 'std::string_view'}, {link: '/saturn/gemini/environment.h', type: 'Saturn::Gemini::Object *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'mapParameter',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::Symbol *'}, {link: '/saturn/gemini/environment.h', type: 'Saturn::Gemini::Object *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'makeChild',
 signature: [],
return: {link: '/saturn/gemini/environment.h', type: 'Saturn::Gemini::Environment'},
 description: ''}]}, {name: 'FunctionSignature',
 classComment: '',
 publicMethods: []}, {name: 'Result',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'interpreter.h',
 contents: {classes: [], freeFunctions: [{name: 'interpret',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::SExpression *'}, {link: '/saturn/gemini/environment.h', type: 'Saturn::Gemini::Environment &'}],
return: {link: '', type: 'Saturn::Gemini::CallResult'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'mercury',
 contents: []}, 
{type: 'file',
 classType: 'fileType',
 name: 'crc.h',
 contents: {classes: [], freeFunctions: [{name: 'computeLookupTable',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'check32',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint8_t *'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'bool'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'logging.h',
 contents: {classes: [{name: 'Logger',
 classComment: '',
 publicMethods: [{name: 'info',
 signature: [{link: '', type: 'char *'}],
return: {link: '', type: 'void'},
 description: ''}]}], freeFunctions: [{name: 'subscribe',
 signature: [],
return: {link: '', type: 'void'},
 description: '    Adds the calling task to the EventSystem\'s subscriber list,    so anytime the system receives an event it will be sent a copy    '}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'parsing.h',
 contents: {classes: [{name: 'Literal',
 classComment: '',
 publicMethods: []}, {name: 'SExpression',
 classComment: '',
 publicMethods: []}, {name: 'Symbol',
 classComment: '',
 publicMethods: []}, {name: 'IntLiteral',
 classComment: '',
 publicMethods: []}, {name: 'FloatLiteral',
 classComment: '',
 publicMethods: []}, {name: 'StringLiteral',
 classComment: '',
 publicMethods: []}, {name: 'BoolLiteral',
 classComment: '',
 publicMethods: []}, {name: 'List',
 classComment: '',
 publicMethods: []}, {name: 'ParseError',
 classComment: '',
 publicMethods: []}, {name: 'Constructor',
 classComment: '',
 publicMethods: [{name: 'startsWith',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'bool'},
 description: ''}]}], freeFunctions: [{name: 'read',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'std::variant<SExpression *, ParseError>'},
 description: ''}, {name: 'getConstructor',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::SExpression *'}],
return: {link: '', type: 'std::optional<Constructor>'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'time.h',
 contents: {classes: [], freeFunctions: [{name: 'getHighResolutionTimeSeconds',
 signature: [],
return: {link: '', type: 'double'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'wait.h',
 contents: {classes: [], freeFunctions: [{name: 'waitForMount',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'services',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'apollo',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'lib',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'elements',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'container.h',
 contents: {classes: [{name: 'Container',
 classComment: '    A Container is an element that arranges multiple child    elements in some specific layout.    ',
 publicMethods: [{name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}, {link: '', type: 'const std::vector<MetaData> &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}, {link: '', type: 'const std::vector<MetaData> &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'layoutChildren',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getChildBounds',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'const Apollo::Elements::UIElement *'}],
return: {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'},
 description: ''}, {name: 'requestLayoutText',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'requestRender',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'MetaData',
 classComment: '',
 publicMethods: []}, {name: 'ContainedElement',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'control.h',
 contents: {classes: [], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'element.h',
 contents: {classes: [{name: 'UIElement',
 classComment: '    Base class for all elements    ',
 publicMethods: [{name: 'onChange',
 signature: [{link: '', type: 'Apollo::Elements::UIElement::Bindings'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getDesiredWidth',
 signature: [],
return: {link: '', type: 'int'},
 description: ''}, {name: 'getDesiredHeight',
 signature: [],
return: {link: '', type: 'int'},
 description: ''}, {name: 'getParent',
 signature: [],
return: {link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'},
 description: ''}, {name: 'setParent',
 signature: [{link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getBounds',
 signature: [],
return: {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'},
 description: ''}, {name: 'layoutText',
 signature: [{link: '/services/apollo/lib/text.h', type: 'Apollo::Text::Renderer *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'render',
 signature: [{link: '/services/apollo/lib/renderer.h', type: 'Apollo::Renderer *'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'requestLayoutText',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'requestRender',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'Bounds',
 classComment: '',
 publicMethods: []}, {name: 'Margins',
 classComment: '',
 publicMethods: []}, {name: 'Configuration',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'adjustForAlignment',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'Apollo::Elements::Alignment'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'parseElement',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::SExpression *'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Configuration &'}],
return: {link: '', type: 'bool'},
 description: '    Base parsing function that dervied elements use as a     fallback to parse a single constructor at a time    '}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'grid.h',
 contents: {classes: [{name: 'Grid',
 classComment: '    A Grid is a container that arranges multiple child    elements in rows and columns.    ',
 publicMethods: [{name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}, {link: '', type: 'const int &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}, {link: '', type: 'const int &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'layoutChildren',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getChildBounds',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'const Apollo::Elements::UIElement *'}],
return: {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'},
 description: ''}, {name: 'layoutText',
 signature: [{link: '/services/apollo/lib/text.h', type: 'Apollo::Text::Renderer *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'render',
 signature: [{link: '/services/apollo/lib/renderer.h', type: 'Apollo::Renderer *'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'clearTemplateItems',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'GridElement',
 classComment: '',
 publicMethods: []}, {name: 'RowColumnDefinition',
 classComment: '',
 publicMethods: []}, {name: 'GridConfiguration',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'parseGrid',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::SExpression *'}],
return: {link: '', type: 'std::optional<GridConfiguration>'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'label.h',
 contents: {classes: [{name: 'Label',
 classComment: '    A Label is a UI Element that displays a block of text. The text can be changed     at runtime with code, but isn\'t user interactive like a textbox is.    ',
 publicMethods: [{name: 'layoutText',
 signature: [{link: '/services/apollo/lib/text.h', type: 'Apollo::Text::Renderer *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'render',
 signature: [{link: '/services/apollo/lib/renderer.h', type: 'Apollo::Renderer *'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'onChange',
 signature: [{link: '', type: 'Apollo::Elements::Label::Bindings'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'LabelConfiguration',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'parseLabel',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::SExpression *'}],
return: {link: '', type: 'std::optional<LabelConfiguration>'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'listview.h',
 contents: {classes: [{name: 'ListView',
 classComment: '',
 publicMethods: [{name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}, {link: '', type: 'const int &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}, {link: '', type: 'const int &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'layoutChildren',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getChildBounds',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'const Apollo::Elements::UIElement *'}],
return: {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'},
 description: ''}, {name: 'layoutText',
 signature: [{link: '/services/apollo/lib/text.h', type: 'Apollo::Text::Renderer *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'render',
 signature: [{link: '/services/apollo/lib/renderer.h', type: 'Apollo::Renderer *'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'}, {link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::Bounds'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'clearTemplateItems',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'ListViewConfiguration',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'parseListView',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::SExpression *'}],
return: {link: '', type: 'std::optional<ListViewConfiguration>'},
 description: ''}]}}]}, 
{type: 'file',
 classType: 'fileType',
 name: 'application.h',
 contents: {classes: [{name: 'Application',
 classComment: '    The base class for all graphical Saturn applications,     Application is responsible for setting up a window,    handling logic to update and render its window    ',
 publicMethods: [{name: 'isValid',
 signature: [],
return: {link: '', type: 'bool'},
 description: '        An Application is in a valid state if it successfully        created a Window and TextRenderer object        '}, {name: 'startMessageLoop',
 signature: [],
return: {link: '', type: 'void'},
 description: '        The main loop for all graphical applications. Updates the        window at a fixed rate, and delegates all message handling        to the derived application.        '}, {name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getFunction',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'describeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'databinding.h',
 contents: {classes: [{name: 'Observable',
 classComment: '    Observable is a wrapper for a type that sends a notification    each time the value it wraps changes.    ',
 publicMethods: [{name: 'subscribe',
 signature: [{link: '', type: 'std::function<void ()>'}],
return: {link: '', type: 'std::function<T ()>'},
 description: ''}, {name: 'setValue',
 signature: [{link: '', type: 'T'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'ObservableCollection',
 classComment: '    An observer for a type that notifies on other changes besides    assignment, such as adding/removing/modifying elements in    the collection.    ',
 publicMethods: [{name: 'clear',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'subscribeItemAdded',
 signature: [{link: '', type: 'Bindable *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'operator[]',
 signature: [{link: '', type: 'std::size_t'}],
return: {link: '', type: 'Item &'},
 description: ''}, {name: 'operator[]',
 signature: [{link: '', type: 'std::size_t'}],
return: {link: '', type: 'const Item &'},
 description: ''}, {name: 'size',
 signature: [],
return: {link: '', type: 'std::size_t'},
 description: ''}]}, {name: 'Bindable',
 classComment: '    A Bindable is the link between an Observable and a    UI Element. An Application can own any number of    observable values. UI Elements can expose certain    values that an application might want to have access    to. Bindable can subscribe to notification changes    from an Observable, and then notify its parent    UI Element about the change, and allows the element    to access the value.    The template parameter Binding is expected to be    an Enum Class that identifies a UI Element-specific    property that can be bound. For example,     TextBox::Bindings holds all of the properties that    can be bound, such as its Text value. This is an    easy way to identify which property changed when    notifying the parent UI object.    ',
 publicMethods: [{name: 'notifyChange',
 signature: [],
return: {link: '', type: 'void'},
 description: '        Indicates to the parent UI element that the        Observable this binding subscribed to changed        its value.        '}, {name: 'getValue',
 signature: [],
return: {link: '', type: 'Value'},
 description: '        Gets the current value from the Observable        '}, {name: 'bindTo',
 signature: [{link: '', type: 'Observable<Value> &'}],
return: {link: '', type: 'void'},
 description: '        Subscribes to change events from the Observable,        and gets a getter function from it.        '}]}, {name: 'BindableCollection',
 classComment: '',
 publicMethods: [{name: 'clearItems',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'debug.h',
 contents: {classes: [], freeFunctions: [{name: 'drawBox',
 signature: [{link: '', type: 'uint32_t *'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '    Renders a hollow box outline into the given buffer    '}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'element_layout.h',
 contents: {classes: [], freeFunctions: [{name: 'getConstructorType',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::Constructor'}],
return: {link: '', type: 'std::optional<std::variant<KnownContainers, KnownElements> >'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'layout.h',
 contents: {classes: [], freeFunctions: [{name: 'parseGridMeta',
 signature: [{link: '/saturn/parsing.h', type: 'Saturn::Parse::Constructor'}, {link: '', type: 'int &'}],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'parseMeta',
 signature: [],
return: {link: '', type: 'int'},
 description: ''}, {name: 'finishContainer',
 signature: [{link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}, {link: '/services/apollo/lib/elements/container.h', type: 'Apollo::Elements::Container *'}, {link: '/saturn/parsing.h', type: 'Saturn::Parse::List *'}],
return: {link: '', type: 'std::optional<Container *>'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'renderer.h',
 contents: {classes: [{name: 'Renderer',
 classComment: '',
 publicMethods: [{name: 'drawRectangle',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'const Elements::Bounds &'}, {link: '', type: 'const Elements::Bounds &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'drawText',
 signature: [{link: '/services/apollo/lib/text.h', type: 'const Apollo::Text::TextLayout &'}, {link: '', type: 'const Elements::Bounds &'}, {link: '', type: 'const Elements::Bounds &'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getTextRenderer',
 signature: [],
return: {link: '', type: 'Text::Renderer *'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'text.h',
 contents: {classes: [{name: 'FaceCache',
 classComment: '',
 publicMethods: [{name: 'addCache',
 signature: [{link: '', type: 'int'}, {link: '', type: 'Apollo::Text::Style'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getGlyphCache',
 signature: [{link: '', type: 'Apollo::Text::Style'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'std::optional<Cache *>'},
 description: ''}]}, {name: 'Renderer',
 classComment: '    Renderer handles the layout, positioning and rendering of text    into a window\'s framebuffer    ',
 publicMethods: [{name: 'drawText',
 signature: [{link: '/services/apollo/lib/text.h', type: 'const Apollo::Text::TextLayout &'}, {link: '/services/apollo/lib/elements/element.h', type: 'const Apollo::Elements::Bounds &'}, {link: '/services/apollo/lib/elements/element.h', type: 'const Apollo::Elements::Bounds &'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        Renders a prepared text layout to the stored window\'s framebuffer,        with alpha blending.        '}, {name: 'layoutText',
 signature: [{link: '', type: 'const char *'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'Apollo::Text::Style'}, {link: '', type: 'bool'}, {link: '', type: 'uint32_t'}],
return: {link: '/services/apollo/lib/text.h', type: 'Apollo::Text::TextLayout'},
 description: '        Prepares each glyph\'s bitmap with FreeType, positions each        glyph with optional kerning, and applies line wrapping.        Allows the use of ANSI escape sequences in text to change        the colour of glyphs.        '}]}, {name: 'Glyph',
 classComment: '    Represents a single printable character    ',
 publicMethods: [{name: 'copyImage',
 signature: [],
return: {link: '', type: 'int'},
 description: ''}, {name: 'isValid',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'BoundingBox',
 classComment: '',
 publicMethods: []}, {name: 'TextLayout',
 classComment: '    Stores the info necessary to render some text.    If the text doesn\'t change then this can be cached    and reused    ',
 publicMethods: []}, {name: 'Cache',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'createRenderer',
 signature: [{link: '/services/apollo/lib/window.h', type: 'Apollo::Window *'}],
return: {link: '/services/apollo/lib/text.h', type: 'Apollo::Text::Renderer *'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'window.h',
 contents: {classes: [{name: 'Window',
 classComment: '    Represents a GUI Window. Window uses double buffering,    all rendering is done with the front framebuffer and then    gets copied to the back buffer with blitBackBuffer, which    is a shared memory buffer from the Window Manager    ',
 publicMethods: [{name: 'getFramebuffer',
 signature: [],
return: {link: '', type: 'uint32_t *'},
 description: '        Gets the front buffer to render to        '}, {name: 'getBackgroundColour',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'setBackgroundColour',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getWidth',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'getHeight',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'blitBackBuffer',
 signature: [],
return: {link: '', type: 'void'},
 description: '        Copies the front buffer\'s contents to the backbuffer,        only copying areas previously marked dirty with markAreaDirty        '}, {name: 'markAreaDirty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        Indicates that the given rectangle is dirty and should be        copied to the backbuffer on the next blitBackBuffer call.        Can be called multiple times before calling blit, which        will expand the dirty area to the min and max of the current        and new areas.        '}, {name: 'resize',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'setRenderer',
 signature: [{link: '/services/apollo/lib/renderer.h', type: 'Apollo::Renderer *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '', type: 'Elements::UIElement *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '', type: 'Elements::UIElement *'}, {link: '', type: 'const std::vector<Elements::MetaData> &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '', type: 'Elements::Container *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '', type: 'Elements::Container *'}, {link: '', type: 'const std::vector<Elements::MetaData> &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'layoutChildren',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getChildBounds',
 signature: [{link: '', type: 'const Elements::UIElement *'}],
return: {link: '', type: 'Elements::Bounds'},
 description: ''}, {name: 'layoutText',
 signature: [{link: '/services/apollo/lib/text.h', type: 'Apollo::Text::Renderer *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'render',
 signature: [{link: '/services/apollo/lib/renderer.h', type: 'Apollo::Renderer *'}, {link: '', type: 'Elements::Bounds'}, {link: '', type: 'Elements::Bounds'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'render',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'layoutText',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'requestLayoutText',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'requestRender',
 signature: [{link: '/services/apollo/lib/elements/element.h', type: 'Apollo::Elements::UIElement *'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'WindowBuffer',
 classComment: '',
 publicMethods: []}, {name: 'DirtyArea',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'createWindow',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '/services/apollo/lib/window.h', type: 'Apollo::Window *'},
 description: ''}]}}]}, 
{type: 'file',
 classType: 'fileType',
 name: 'alphablend.h',
 contents: {classes: [], freeFunctions: [{name: 'blend',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint8_t'}],
return: {link: '', type: 'uint32_t'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'container.h',
 contents: {classes: [{name: 'ContainerChild',
 classComment: '',
 publicMethods: []}, {name: 'Container',
 classComment: '',
 publicMethods: [{name: 'addChild',
 signature: [{link: '/services/apollo/tile.h', type: 'Apollo::Tile'}, {link: '/services/apollo/tile.h', type: 'Apollo::Size'}, {link: '', type: 'bool'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'addChild',
 signature: [{link: '/services/apollo/container.h', type: 'Apollo::Container *'}, {link: '/services/apollo/tile.h', type: 'Apollo::Size'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'layoutChildren',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getChildrenCount',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'findTile',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'std::optional<Tile *>'},
 description: ''}, {name: 'composite',
 signature: [{link: '', type: 'volatile uint32_t *'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'dispatchRenderMessages',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'focusPreviousTile',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'focusNextTile',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'display.h',
 contents: {classes: [{name: 'Display',
 classComment: '',
 publicMethods: [{name: 'addTile',
 signature: [{link: '/services/apollo/tile.h', type: 'Apollo::Tile'}, {link: '/services/apollo/tile.h', type: 'Apollo::Size'}, {link: '', type: 'bool'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'enableRendering',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'injectMessage',
 signature: [{link: '/kernel/ipc.h', type: 'IPC::Message &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'composite',
 signature: [{link: '', type: 'volatile uint32_t *'}, {link: '', type: 'uint32_t'}, {link: '/services/apollo/tile.h', type: 'Apollo::Bounds'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'renderAll',
 signature: [{link: '', type: 'volatile uint32_t *'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'splitContainer',
 signature: [{link: '', type: 'Apollo::Split'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'render',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'focusPreviousTile',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'focusNextTile',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'changeSplitDirection',
 signature: [{link: '', type: 'Apollo::Split'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getActiveTaskId',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'manager.h',
 contents: {classes: [{name: 'Manager',
 classComment: '',
 publicMethods: [{name: 'messageLoop',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}], freeFunctions: [{name: 'main',
 signature: [],
return: {link: '', type: 'int'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'messages.h',
 contents: {classes: [{name: 'CreateWindow',
 classComment: '',
 publicMethods: []}, {name: 'CreateWindowSucceeded',
 classComment: '',
 publicMethods: []}, {name: 'ReadyToRender',
 classComment: '',
 publicMethods: []}, {name: 'Render',
 classComment: '',
 publicMethods: []}, {name: 'Update',
 classComment: '',
 publicMethods: []}, {name: 'Show',
 classComment: '',
 publicMethods: []}, {name: 'Move',
 classComment: '',
 publicMethods: []}, {name: 'SplitContainer',
 classComment: '',
 publicMethods: []}, {name: 'HideOverlay',
 classComment: '',
 publicMethods: []}, {name: 'ChangeSplitDirection',
 classComment: '',
 publicMethods: []}, {name: 'LaunchProgram',
 classComment: '',
 publicMethods: []}, {name: 'Resize',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'tile.h',
 contents: {classes: [{name: 'WindowHandle',
 classComment: '',
 publicMethods: []}, {name: 'Bounds',
 classComment: '    A Tile is a rectangular area where content is rendered.    It can either be a Window, or a Container of Windows.    ',
 publicMethods: []}, {name: 'Tile',
 classComment: '',
 publicMethods: []}, {name: 'Size',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'renderTile',
 signature: [{link: '', type: 'volatile uint32_t *'}, {link: '/services/apollo/tile.h', type: 'Apollo::Tile &'}, {link: '', type: 'uint32_t'}, {link: '/services/apollo/tile.h', type: 'Apollo::Bounds'}],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'discovery',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'loader.h',
 contents: {classes: [], freeFunctions: [{name: 'discoverDevices',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'pci.h',
 contents: {classes: [{name: 'HostBridge',
 classComment: '',
 publicMethods: []}, {name: 'Device',
 classComment: '',
 publicMethods: []}, {name: 'Identification',
 classComment: '        This is Configuration Space register offset 0x00        ',
 publicMethods: [{name: 'isValid',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'Class',
 classComment: '        This is Configuration Space register offset 0x08        ',
 publicMethods: [{name: 'getWord',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}]}, {name: 'Header',
 classComment: '        This is Configuration Space register offset 0x0C        ',
 publicMethods: [{name: 'isMultiFunction',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'Interrupt',
 classComment: '        This is Configuration Space register offset 0x3C        ',
 publicMethods: []}, {name: 'BusInfo',
 classComment: '        This is Configuration Space register offset 0x18        ',
 publicMethods: []}], freeFunctions: [{name: 'discoverDevices',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'drivers',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'ata',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'driver.h',
 contents: {classes: [{name: 'Driver',
 classComment: '',
 publicMethods: [{name: 'queueReadSector',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'receiveSector',
 signature: [{link: '', type: 'uint16_t *'}],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'IdentifyDeviceData',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'bochsGraphicsAdaptor',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'driver.h',
 contents: {classes: [], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}]}, {type: 'dir',
 classType: 'dirType',
 name: 'events',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'system.h',
 contents: {classes: [{name: 'EventSystem',
 classComment: '',
 publicMethods: [{name: 'messageLoop',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getFunction',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'describeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'Log',
 classComment: '',
 publicMethods: [{name: 'addEntry',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'FileDescriptor',
 classComment: '',
 publicMethods: []}, {name: 'ReceiveSignature',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'fakeFileSystem',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'fakeFileSystem.h',
 contents: {classes: [], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'hardwareFileSystem',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'cpu',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'cpu.h',
 contents: {classes: [{name: 'CPUObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'detectCPU',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'extensions.h',
 contents: {classes: [{name: 'CPUExtensionsObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'detectExtensions',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'features.h',
 contents: {classes: [{name: 'CPUFeaturesObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'detectFeatures',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'id.h',
 contents: {classes: [{name: 'CPUIdObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'detectId',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'instructions.h',
 contents: {classes: [{name: 'CPUInstructionsObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'detectInstructions',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'instructionsets.h',
 contents: {classes: [{name: 'CPUInstructionSetsObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'detectInstructionSets',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'support.h',
 contents: {classes: [{name: 'CPUSupportObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'detectSupport',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'technology.h',
 contents: {classes: [{name: 'CPUTechnologyObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'detectTechnology',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'pci',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'device.h',
 contents: {classes: [{name: 'DeviceObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}, {name: 'exists',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'function.h',
 contents: {classes: [{name: 'FunctionObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getFunction',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'describeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}, {name: 'exists',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'getClassCode',
 signature: [],
return: {link: '', type: 'uint8_t'},
 description: ''}, {name: 'getSubClassCode',
 signature: [],
return: {link: '', type: 'uint8_t'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'host.h',
 contents: {classes: [{name: 'HostObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'pci.h',
 contents: {classes: [{name: 'Object',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getFunction',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'describeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: []}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'ps2',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'mouse.h',
 contents: {classes: [{name: 'MouseObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: []}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'timer',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'timer.h',
 contents: {classes: [{name: 'TimerObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'createTimerObject',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'tsc.h',
 contents: {classes: [{name: 'TSCObject',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: []}}]}, 
{type: 'file',
 classType: 'fileType',
 name: 'object.h',
 contents: {classes: [{name: 'HardwareObject',
 classComment: '',
 publicMethods: [{name: 'getFunction',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'describeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}, {name: 'getName',
 signature: [],
return: {link: '', type: 'const char *'},
 description: ''}]}], freeFunctions: [{name: 'replyWriteSucceeded',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'bool'}, {link: '', type: 'bool'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'system.h',
 contents: {classes: [], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'detectHardware',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'keyboard',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'keyboard.h',
 contents: {classes: [], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'messages.h',
 contents: {classes: [{name: 'KeyEvent',
 classComment: '',
 publicMethods: []}, {name: 'KeyPress',
 classComment: '',
 publicMethods: []}, {name: 'CharacterInput',
 classComment: '',
 publicMethods: []}, {name: 'RedirectToWindowManager',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'virtualKeys.h',
 contents: {classes: [], freeFunctions: []}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'massStorageFileSystem',
 contents: [{type: 'dir',
 classType: 'dirType',
 name: 'ext2',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'filesystem.h',
 contents: {classes: [{name: 'Ext2FileSystem',
 classComment: '',
 publicMethods: [{name: 'receiveSector',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'openFile',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'readDirectory',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'readFile',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'seekFile',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'MassStorageFileSystem::Origin'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'syncPositionWithCache',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'SuperBlock',
 classComment: '',
 publicMethods: []}, {name: 'BlockGroupDescriptor',
 classComment: '',
 publicMethods: []}, {name: 'Inode',
 classComment: '',
 publicMethods: [{name: 'isDirectory',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'DirectoryEntry',
 classComment: '',
 publicMethods: []}, {name: 'ReadRequest',
 classComment: '',
 publicMethods: []}, {name: 'Request',
 classComment: '',
 publicMethods: []}, {name: 'CachedBlock',
 classComment: '',
 publicMethods: []}, {name: 'FileDescriptor',
 classComment: '',
 publicMethods: []}, {name: 'RequestMeta',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}]}, 
{type: 'file',
 classType: 'fileType',
 name: 'filesystem.h',
 contents: {classes: [{name: 'IBlockDevice',
 classComment: '',
 publicMethods: [{name: 'queueReadSector',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'receiveSector',
 signature: [{link: '', type: 'uint16_t *'}],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'Requester',
 classComment: '',
 publicMethods: []}, {name: 'Transfer',
 classComment: '',
 publicMethods: []}, {name: 'BlockDevice',
 classComment: '',
 publicMethods: [{name: 'queueReadSector',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'receiveSector',
 signature: [{link: '', type: 'uint16_t *'}],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'FileSystem',
 classComment: '',
 publicMethods: [{name: 'receiveSector',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'openFile',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'readDirectory',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'readFile',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'seekFile',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'MassStorageFileSystem::Origin'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'syncPositionWithCache',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'GUID',
 classComment: '',
 publicMethods: [{name: 'matches',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint16_t'}, {link: '', type: 'uint16_t'}, {link: '', type: 'uint64_t'}],
return: {link: '', type: 'bool'},
 description: ''}]}, {name: 'Partition',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'system.h',
 contents: {classes: [{name: 'MassStorageController',
 classComment: '',
 publicMethods: [{name: 'preloop',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'messageLoop',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'GPTHeader',
 classComment: '',
 publicMethods: []}, {name: 'Request',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'convert64ToLittleEndian',
 signature: [{link: '', type: 'uint64_t'}],
return: {link: '', type: 'uint64_t'},
 description: ''}, {name: 'convert32ToLittleEndian',
 signature: [{link: '', type: 'uint32_t'}],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'convert16ToLittleEndian',
 signature: [{link: '', type: 'uint16_t'}],
return: {link: '', type: 'uint16_t'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'memory',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'memory.h',
 contents: {classes: [{name: 'GetPhysicalReport',
 classComment: '',
 publicMethods: []}, {name: 'PhysicalReport',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'mouse',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'messages.h',
 contents: {classes: [{name: 'MouseEvent',
 classComment: '',
 publicMethods: []}, {name: 'MouseMove',
 classComment: '',
 publicMethods: []}, {name: 'ButtonPress',
 classComment: '',
 publicMethods: []}, {name: 'Scroll',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'service.h',
 contents: {classes: [], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'processFileSystem',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'object.h',
 contents: {classes: [{name: 'ProcessObject',
 classComment: '    A ProcessObject is meant to emulate entries in Plan9\'s /proc    It allows the user/other processes to query data about    the process, such as the executable it started,    or the commandline args perhaps    ',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getFunction',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'describeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: ''}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: ''}]}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'processFileSystem.h',
 contents: {classes: [], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'ps2',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'mouse.h',
 contents: {classes: [{name: 'MouseState',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'initializeMouse',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'transitionMouseState',
 signature: [{link: '/services/ps2/mouse.h', type: 'PS2::MouseState &'}, {link: '', type: 'uint8_t'}],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'ps2.h',
 contents: {classes: [{name: 'ReceiveData',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeCommand',
 signature: [{link: '', type: 'uint8_t'}, {link: '', type: 'PS2::Port'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'readByte',
 signature: [],
return: {link: '', type: 'uint8_t'},
 description: ''}, {name: 'waitForAck',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'initializeController',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'identifyDevices',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'startup',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'startup.h',
 contents: {classes: [], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'runProgram',
 signature: [{link: '', type: 'const char *'}],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'terminal',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'terminal.h',
 contents: {classes: [{name: 'Terminal',
 classComment: '',
 publicMethods: [{name: 'writeCharacter',
 signature: [{link: '', type: 'uint8_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'writeCharacter',
 signature: [{link: '', type: 'uint8_t'}, {link: '', type: 'uint8_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'interpret',
 signature: [{link: '', type: 'char *'}, {link: '', type: 'uint32_t'}],
return: {link: '/services/terminal/terminal.h', type: 'Terminal::DirtyRect'},
 description: ''}, {name: 'getInstance',
 signature: [],
return: {link: '/services/terminal/terminal.h', type: 'Terminal::Terminal &'},
 description: ''}, {name: 'getIndex',
 signature: [],
return: {link: '', type: 'uint32_t'},
 description: ''}, {name: 'getBuffer',
 signature: [],
return: {link: '', type: 'uint16_t *'},
 description: ''}]}, {name: 'PrintMessage',
 classComment: '',
 publicMethods: []}, {name: 'Print32Message',
 classComment: '',
 publicMethods: []}, {name: 'Print64Message',
 classComment: '',
 publicMethods: []}, {name: 'Print128Message',
 classComment: '',
 publicMethods: []}, {name: 'GetCharacter',
 classComment: '',
 publicMethods: []}, {name: 'DirtyRect',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'vga.h',
 contents: {classes: [{name: 'BlitMessage',
 classComment: '',
 publicMethods: []}, {name: 'ScrollScreen',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}, {name: 'getColour',
 signature: [{link: '', type: 'VGA::Colours'}, {link: '', type: 'VGA::Colours'}],
return: {link: '', type: 'uint8_t'},
 description: ''}, {name: 'setForegroundColour',
 signature: [{link: '', type: 'uint8_t &'}, {link: '', type: 'uint8_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'setBackgroundColour',
 signature: [{link: '', type: 'uint8_t &'}, {link: '', type: 'uint8_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'prepareCharacter',
 signature: [{link: '', type: 'uint8_t'}, {link: '', type: 'uint8_t'}],
return: {link: '', type: 'uint16_t'},
 description: ''}, {name: 'disableCursor',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}]}, {type: 'dir',
 classType: 'dirType',
 name: 'virtualFileSystem',
 contents: [
{type: 'file',
 classType: 'fileType',
 name: 'cache.h',
 contents: {classes: [{name: 'Entry',
 classComment: '',
 publicMethods: []}, {name: 'DataBlock',
 classComment: '    Cache::Directory root;    root\'s children: [process, system/hardware, bin]    / [mount request says cacheable]        process [mount request says not cacheable]        system             hardware [mount request says not cacheable]        bin [mount request says not cacheable]    on mounting /, vfs reads / directory, receives:        testA/, testB/, C    ',
 publicMethods: []}, {name: 'File',
 classComment: '',
 publicMethods: []}, {name: 'Directory',
 classComment: '',
 publicMethods: []}, {name: 'Union',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'messages.h',
 contents: {classes: [{name: 'MountRequest',
 classComment: '',
 publicMethods: []}, {name: 'GetDirectoryEntries',
 classComment: '    From VFS to FileSystems only    ',
 publicMethods: []}, {name: 'GetDirectoryEntriesResult',
 classComment: '',
 publicMethods: []}, {name: 'OpenRequest',
 classComment: '    End VFS to FileSystems only section    ',
 publicMethods: [{name: 'shrink',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'OpenResult',
 classComment: '',
 publicMethods: []}, {name: 'CreateRequest',
 classComment: '',
 publicMethods: [{name: 'shrink',
 signature: [{link: '', type: 'int'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'CreateResult',
 classComment: '',
 publicMethods: []}, {name: 'ReadRequest',
 classComment: '',
 publicMethods: []}, {name: 'ReadResult',
 classComment: '',
 publicMethods: []}, {name: 'Read512Result',
 classComment: '',
 publicMethods: []}, {name: 'ReadStreamRequest',
 classComment: '',
 publicMethods: []}, {name: 'ReadStreamResult',
 classComment: '',
 publicMethods: []}, {name: 'WriteRequest',
 classComment: '',
 publicMethods: []}, {name: 'WriteResult',
 classComment: '',
 publicMethods: []}, {name: 'CloseRequest',
 classComment: '',
 publicMethods: []}, {name: 'CloseResult',
 classComment: '',
 publicMethods: []}, {name: 'SeekRequest',
 classComment: '',
 publicMethods: []}, {name: 'SeekResult',
 classComment: '',
 publicMethods: []}, {name: 'SyncPositionWithCache',
 classComment: '',
 publicMethods: []}, {name: 'SubscribeMount',
 classComment: '',
 publicMethods: []}, {name: 'MountNotification',
 classComment: '',
 publicMethods: []}], freeFunctions: []}}, 
{type: 'file',
 classType: 'fileType',
 name: 'virtualFileSystem.h',
 contents: {classes: [{name: 'VirtualFileSystem',
 classComment: '',
 publicMethods: [{name: 'messageLoop',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'PendingOpen',
 classComment: '',
 publicMethods: []}, {name: 'PendingCreate',
 classComment: '',
 publicMethods: []}, {name: 'PendingBlock',
 classComment: '',
 publicMethods: []}, {name: 'PendingRead',
 classComment: '',
 publicMethods: []}, {name: 'PendingStream',
 classComment: '',
 publicMethods: []}, {name: 'PendingRequest',
 classComment: '',
 publicMethods: []}, {name: 'VirtualFileDescriptor',
 classComment: '',
 publicMethods: [{name: 'isOpen',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}, {name: 'close',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'MountObserver',
 classComment: '',
 publicMethods: []}], freeFunctions: [{name: 'completeReadStreamRequest',
 signature: [{link: '/services/virtualFileSystem/virtualFileSystem.h', type: 'VirtualFileSystem::PendingRequest &'}, {link: '/services/virtualFileSystem/virtualFileSystem.h', type: 'VirtualFileSystem::VirtualFileDescriptor &'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'service',
 signature: [],
return: {link: '', type: 'void'},
 description: ''}]}}, 
{type: 'file',
 classType: 'fileType',
 name: 'vostok.h',
 contents: {classes: [{name: 'Object',
 classComment: '',
 publicMethods: [{name: 'readSelf',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        In addition to properties and functions, you can read an Object itself.        This returns an implementation-defined value, such as a string        containing all the properties/methods supported by the object.        IPC:            Generates a ReadResult message        '}, {name: 'getFunction',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: '        getFunction is called when an object is opened, and the path        is a subdirectory of the object. For example,                 open("/process/1/something")        where /process/1 is an Object, the ProcessFileSystem needs        to determine whether "something" is a function, a property,        or an invalid name.         Returns an implementation specific index to a function,        or -1 if no function matches the given name        '}, {name: 'readFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        Reading a function returns the signature of the function, using        ArgBuffers. Function signatures start with ArgTypes::Function,        then one or more ArgTypes for the parameters (or void if none),        then one ArgType for the return type, and finally ArgTypes::EndArg.        This is written to the end of the ReadResult::buffer in reverse order,        so the buffer looks like:        ReadResult result;        result.buffer[last - 1] = ArgTypes::Function        parameters:        result.buffer[last - 2] = some ArgTypes value thats not Function, Property, or EndArg        ... repeat last for each parameter        return type:        result.buffer[last - x] = some ArgTypes value thats not Function, Property, or EndArg        result.buffer[last - x - 1] = ArgTypes::EndArg        IPC:            Generates a ReadResult message        '}, {name: 'writeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: '        Writing a function calls the function with the supplied arguments passed via        ArgBuffer. Each call to writeFunction generates 1 or 2 IPC::Messages. If        the write succeeded:         -WriteResult success = true        -ReadResult buffer = whatever the called function returned        else if the write failed:        -WriteResult success = false        So whenever you write to a function, you must call receive() at least once        to read the WriteResult, and then additionally a second receive() if the         WriteResult succeeded.        IPC:            Generates a WriteResult message            [Optional] Generates a ReadResult message        '}, {name: 'describeFunction',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        describeFunction writes the signature of the given function into an ArgBuffer.        It is called by readFunction        '}, {name: 'getProperty',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '', type: 'int'},
 description: '        When the ProcessFileSystem handles an OpenRequest, it first calls getFunction        to see if the path matches a function. If it fails it then calls getProperty        to see if its a property.        Returns an implementation specific index to a property,        or -1 if no property matches the given name         '}, {name: 'readProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: '        Writes the value of the property at the beginning of the ReadResult buffer,        and the type of the property at the end of the ReadResult buffer.        The type is three values:        1) ArgTypes::Property        2) <ArgTypes value thats not Function/Property/EndArg>        3) ArgTypes::EndArg         IPC:            Generates a ReadResult message        '}, {name: 'writeProperty',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: '        Sets the property to the given value, if the type of the property matches        the type of the value in the arg buffer.                 IPC:            Generates a WriteResult message        '}, {name: 'getNestedObject',
 signature: [{link: '', type: 'std::string_view'}],
return: {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::Object *'},
 description: '        Vostok Objects can contain and expose other Vostok Objects nested within them.        In order to read/write properties/functions to nested objects, we must get        a pointer to said object        '}]}, {name: 'FileDescriptor',
 classComment: '',
 publicMethods: [{name: 'read',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'write',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '/services/virtualFileSystem/vostok.h', type: 'Vostok::ArgBuffer &'}],
return: {link: '', type: 'void'},
 description: ''}]}, {name: 'ArgBuffer',
 classComment: '    An ArgBuffer stores values and their types together. Values are     stored at the beginning of the buffer, and their corresponding    types are stored at the end of the buffer in reverse order.    ',
 publicMethods: [{name: 'writeType',
 signature: [{link: '', type: 'Vostok::ArgTypes'}],
return: {link: '', type: 'void'},
 description: ''}, {name: 'readType',
 signature: [],
return: {link: '', type: 'Vostok::ArgTypes'},
 description: ''}, {name: 'peekType',
 signature: [],
return: {link: '', type: 'Vostok::ArgTypes'},
 description: ''}, {name: 'hasErrors',
 signature: [],
return: {link: '', type: 'bool'},
 description: ''}]}], freeFunctions: [{name: 'replyWriteSucceeded',
 signature: [{link: '', type: 'uint32_t'}, {link: '', type: 'uint32_t'}, {link: '', type: 'bool'}, {link: '', type: 'bool'}],
return: {link: '', type: 'void'},
 description: ''}]}}]}]}]};export default topLevel